package {{{package}}};

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.google.common.base.Optional;
import static com.google.common.base.Preconditions.checkNotNull;

import restx.common.Types;
import restx.*;
import restx.entity.*;
import restx.http.*;
import restx.factory.*;
import restx.security.*;
import static restx.security.Permissions.*;
import restx.description.*;
import restx.converters.MainStringConverter;
import static restx.common.MorePreconditions.checkPresent;

import javax.validation.Validator;
import static restx.validation.Validations.checkValid;

import java.io.IOException;
import java.io.PrintWriter;

@Component(priority = {{priority}})
{{{condition}}}
public class {{{router}}} extends RestxRouter {

    public {{{router}}}(final {{{resource}}} resource, final EntityResponseWriterRegistry registry, final ObjectMapper mapper, final MainStringConverter converter,
                    final Validator validator, final RestxSecurityManager securityManager) {
        super(
            "{{{routerGroup}}}", "{{{router}}}", new RestxRoute[] {
{{#routes}}
        new StdEntityRoute("{{{routeId}}}", registry.build({{entityType}}, Optional.<String>absent()), new StdRestxRequestMatcher("{{{method}}}", "{{{path}}}"), HttpStatus.{{{successStatusName}}}, RestxLogLevel.{{{logLevelName}}}) {
            @Override
            protected Optional<?> doRoute(RestxRequest request, RestxRequestMatch match) throws IOException {
                {{{securityCheck}}}
                return {{{call}}};
            }

            @Override
            protected void describeOperation(OperationDescription operation) {
                super.describeOperation(operation);
                {{{parametersDescription}}}

                operation.responseClass = "{{{responseClass}}}";
            }
        },
{{/routes}}
        });
    }

}
